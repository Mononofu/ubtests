{"name":"ubtests","body":"# Uebersetzerbau \\(SS12\\)\r\n\r\nDies ist eine gemeinschaftliche Sammlung von Testfaellen fuer die Uebungsbeispiele\r\nder LVA \"Uebersetzerbau \\(SS12\\)\" an der TU Wien.\r\n\r\nKurzes HOWTO (fuer die g0):\r\n\r\n\t$ git clone git://github.com/schuay/ubtests.git ~/test\r\n\r\nDanach koennen die Testfaelle durch diesen Befehl aktualisiert werden:\r\n\r\n\t$ cd ~/test && git pull\r\n\r\nDas Testskript selbst wird von der LVA-Leitung zur Verfuegung gestellt:\r\n\r\n\t$ /usr/ftp/pub/ubvl/test/scanner/test\r\n\t$ /usr/ftp/pub/ubvl/test/parser/test\r\n\t$ /usr/ftp/pub/ubvl/test/ag/test\r\n\t$ /usr/ftp/pub/ubvl/test/codea/test\r\n\t$ /usr/ftp/pub/ubvl/test/codeb/test\r\n\t$ /usr/ftp/pub/ubvl/test/gesamt/test\r\n\r\n# Namenskonventionen fuer das Skript (Zitat LVA Leitung):\r\n\r\nDie Dateien mit der Eingabe heissen *.0, *.1, *.2 oder *.3, wobei die\r\nZiffer hinten den Exit-Code angibt.  Eine Datei, die einen\r\nSyntax-Fehler enthaelt, werden Sie also z.B. foo.2 nennen.  \r\n\r\nDie Dateien mit der Eingabe heissen *.0, *.1, *.2 oder *.3, wobei die\r\nZiffer hinten den Exit-Code angibt.  Eine Datei, die einen\r\nSyntax-Fehler enthaelt, werden Sie also z.B. foo.2 nennen.  Beim\r\nScanner-Beispiel gibt es fuer akzeptable Eingaben (also Dateien, die\r\nauf .0 enden) auch noch eine Ausgabe, die ueberprueft werden muss; die\r\nerwartete Ausgabe fuer die Datei bar.0 nennen Sie bar.out.\r\n\r\nBei den akzeptablen Eingaben (also Dateien, die auf .0 enden) muessen\r\nSie bei codea, codeb, und gesamt zusaetzlich noch eine .call-Datei\r\nschreiben, die C-Code fuer einen oder mehrere Aufrufe von Funktionen\r\nenthaelt, die in der .0/.xin-Datei vorkommen, und das Ergebnis des\r\nAufrufs ueberprueft; und zwar sollen die Aufrufe wie folgt gemacht\r\nwerden:\r\n\r\nRET(...);\r\n\r\nwobei \"...\" die Aufrufe und Ueberpruefungen enthaelt und als Ergebnis\r\ntrue (also 1 in C) liefert, wenn das Ergebnis stimmt, und false (0 in\r\nC), wenn das Ergebnis nicht stimmt.  Zusaetzlich werden Sie\r\nueblicherweise noch die aufgerufenen Funktionen deklarieren.\r\n\r\n\r\n## Weitere Namenskonventionen fuer uns:\r\n\r\n*\tJeder Testfall hat als Praefix \"<nick>_\", sodass keine Namenskonflikte entstehen.\r\n\r\n\r\n# Wie kannst du beitragen?\r\n\r\n## mit git:\r\n\r\n*\tforke das Repository auf github, committe deine Aenderungen und mach einen \"Pull Request\"\r\n*\tclone das Repository, committe deine Aenderungen, erzeuge Patches mit\r\n\r\n\t\tgit format-patch\r\n\r\n\tund maile sie oder poste sie im Informatikforum\r\n\r\n## ohne git:\r\n\r\n*\tschicke deine Testfaelle als Anhang per Mail (mit passenden Dateinamen bitte!)\r\n*\tposte deine Testfaelle im Informatikforum und haenge sie als Attachment an (mit passenden Dateinamen bitte!)\r\n\r\nund natuerlich ist jeder herzlichst dazu eingeladen im Forum ueber Testfaelle zu diskutieren :)\r\n\r\nInfforum-Thread: <http://www.informatik-forum.at/showthread.php?92835-Testcase-Sammlung&p=751724>\r\n\r\nMailadresse(n): jakob.gruber_AT_gmail_DOT_com (weitere Freiwillige sind willkommen, einfach eintragen)\r\n\r\n\r\n# Credits\r\n\r\nDieses README wurde schamlos von https://github.com/lewurm/testub10 adaptiert.\r\n","tagline":"Uebersetzerbau / Compilerconstruction Testcases SS 2012","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}